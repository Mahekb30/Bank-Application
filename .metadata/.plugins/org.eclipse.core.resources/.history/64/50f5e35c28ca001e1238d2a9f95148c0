package com.example.service;

import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.example.dtos.LoanRequestDto;
import com.example.dtos.LoanResponseDto;
import com.example.entities.Loan;
import com.example.repository.LoanRepository;

@Service
public class LoanService {

    @Autowired
    private LoanRepository loanRepository;

    public List<LoanResponseDto> getAllLoans() {
        List<Loan> loans = loanRepository.findAll();
        return loans.stream().map(this::mapToDto).collect(Collectors.toList());
    }

    public LoanResponseDto getLoanById(int id) {
        return mapToDto(loanRepository.findById(id).orElse(null));
    }
    
    public LoanResponseDto getLoanByCustomerId(int customerId) {
      return mapToDto(loanRepository.findByCustomerId(customerId));
    }

    
    public LoanResponseDto createLoan(LoanEvent loanEvent) {
        try {
            Loan loanEntity = mapToEntity(loanRequest);
            return mapToDto(loanRepository.save(loanEntity));
        } catch (Exception e) {
            throw new RuntimeException("Error creating loan: " + e.getMessage());
        }
    }

    public LoanResponseDto updateLoan(int id, LoanRequestDto loanRequest) {
        Loan loanEntity = mapToEntity(loanRequest);
        loanEntity.setId(id);
        return mapToDto(loanRepository.save(loanEntity));
    }

    public void deleteLoan(int id) {
        loanRepository.deleteById(id);
    }

    private Loan mapToEntity(LoanRequestDto loanRequest) {
        if (loanRequest == null) return null;
        Loan loan = new Loan();
        loan.setCustomerId(loanRequest.getCustomerId());
        loan.setAmount(loanRequest.getAmount());
        loan.setInterestRate(loanRequest.getInterestRate());
        loan.setTermMonths(loanRequest.getTermMonths());
        loan.setStatus(loanRequest.getStatus());
        return loan;
    }

    private LoanResponseDto mapToDto(Loan loan) {
        if (loan == null) return null;
        LoanResponseDto loanResponseDto = new LoanResponseDto();
        loanResponseDto.setId(loan.getId());
        loanResponseDto.setCustomerId(loan.getCustomerId());
        loanResponseDto.setAmount(loan.getAmount());
        loanResponseDto.setInterestRate(loan.getInterestRate());
        loanResponseDto.setTermMonths(loan.getTermMonths());
        loanResponseDto.setStatus(loan.getStatus());
        return loanResponseDto;
    }
}

