package com.example.service;

import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import com.example.entities.Loan;
import com.example.repository.LoanRepository;

public class LoanService {
  
  @Autowired
  private LoanRepository loanRepository;

  public List<LoanResponseDto> getAllLoanDetails() {
    
      List<Loan> loans =  loanRepository.findAll();

      
      return loans.stream().map(loan -> mapToDto(customer)).toList();
  }

  public CustomerResponseDto getCustomerById(int id) {
      return mapToDto(customerRepository.findById(id).orElse(null));
  }

  public CustomerResponseDto createCustomer(CustomerRequestDto customer) {
      try {
        Customer customerEntity = mapToEntity(customer);
        return mapToDto(customerRepository.save(customerEntity));
      } catch (Exception e) {
        throw new RuntimeException("Error creating customer: " + e.getMessage());
      }
  }

  public CustomerResponseDto updateCustomer(int id, CustomerRequestDto customer) {
    
      Customer customerEntity = mapToEntity(customer);
      
      if (customerRepository.existsById(id)) {
          customerEntity.setId(id);
          return mapToDto(customerRepository.save(customerEntity));
      }
      return null; // Handle not found scenario
  }

  public void deleteCustomer(int id) {
      customerRepository.deleteById(id);
  }
  
  private boolean checkBalance(Double customerBalance, String balance) {
    if (balance.charAt(0) == '>') {
        double threshold = Double.parseDouble(balance.substring(1));
        return customerBalance >= threshold;
    } else if (balance.charAt(0) == '<') {
        double threshold = Double.parseDouble(balance.substring(1));
        return customerBalance <= threshold;
    } else {
        return false;
    }
}

  public CustomerService(CustomerRepository customerRepository) {
    super();
    this.customerRepository = customerRepository;
  }
  
  private Loan mapToEntity(LoanRequestDto loanRequest) {
    
    if(loanRequest == null) return null;
    
    Loan loan = new Loan();
    loan.setCustomerId(loanRequest.getCustomerId());
    loan.setAmount(loanRequest.getAmount());
    loan.setInterestRate(loanRequest.getInterestRate());
    loan.setStatus(loanRequest.getStatus());
    loan.setTermMonths(loanRequest.getTermMonths());
    return loan;
   
  }
  
  private CustomerResponseDto mapToDto(Customer customer) {
    
    if(customer == null) return null;
    
    CustomerResponseDto customerResponse = new CustomerResponseDto();
    customerResponse.setId(customer.getId());
    customerResponse.setName(customer.getName());
    customerResponse.setAccNo(customer.getAccNo());
    customerResponse.setAccType(customer.getAccType());
    customerResponse.setBalance(customer.getBalance());
    customerResponse.setPanCardNo(customer.getPanCardNo());
    return customerResponse;
   
  }

}
